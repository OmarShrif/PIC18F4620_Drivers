/* 
 * File:   Application1.c
 * Author: Omar Shrif Mohamed
 * https://www.linkedin.com/in/omar-shrif-982413213/
 * Created on January 1, 2024, 9:09 PM
 */

/* Section : Includes */
#include "Application1.h"
#include "MCAL_Layer/CCP/mcal_ccp.h"
#include "MCAL_Layer/Timer1/mcal_timer1.h"
#include "MCAL_Layer/Timer2/mcal_timer2.h"
#include "MCAL_Layer/Timer3/mcal_timer3.h"

/* Section : Functions Declarations */

void CCP1_APP_ISR(void);
void TIMER1_APP_ISR(void);

/* Section : Global Variables Definition */

Std_ReturnType ret = E_OK;

volatile uint8 second_captuer_flag = 0 ;
uint16 second_capture = 0 ;
volatile uint32 timer1_overflow = 0;
sint32 total_period = 0;
sint32 freq = 0;

timer1_config_t timer1 = 
{
    .TIMER1_InterruptHandler = TIMER1_APP_ISR,
    .timer1_mode = TIMER1_TIMER_MODE,
    .timer1_reg_wr_mode = TIMER1_RW_REG_8Bit_MODE,
    .timer1_prescaler_value = TIMER1_PRESCALER_DIV_BY_1,
    .timer1_preload_value = 0
};
ccp_config_t ccp = 
{
    .CCP1_InterruptHandler = CCP1_APP_ISR,
    .ccp1_capture_mode = CCP_CAPTURE_MODE_1_RISING_EDGE,
    .ccp_capture_timer = CCP1_CCP2_TIMER1,
    .ccp1_pin.port = GPIO_PORTC,
    .ccp1_pin.pin = GPIO_PIN2,
    .ccp1_pin.direction = GPIO_DIRECTION_INPUT,
    .ccp1_pin.logic = GPIO_LOGIC_LOW,
};

/* Section : Functions Definition */

int main() 
{
    application_initialize();
    
    while(1)
    {
        
    }
    
    return (EXIT_SUCCESS);
}

void application_initialize(void)
{
    Std_ReturnType ret_init = E_OK;
    ret_init = ecu_layer_initialize();
    ret_init = timer1_Init(&timer1);
    ret_init = ccp1_Init(&ccp);
}

void CCP1_APP_ISR(void)
{
    Std_ReturnType ret = E_OK;
    ret = ccp1_Capture_Mode_Read_Value(&second_capture);
    total_period = (sint32)(timer1_overflow * 65536) + second_capture;
    timer1_overflow = 0;
    ret = timer1_Write_Value(&timer1,0);
    freq = (sint32)(1000000.0/total_period);
}

void TIMER1_APP_ISR(void)
{
    timer1_overflow++;
}